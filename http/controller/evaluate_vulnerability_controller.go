package controller

import (
	"fmt"
	"net/http"
	"net/url"
	"regexp"
	"strconv"
	"strings"

	"github.com/gin-gonic/gin"
	"github.com/globalsign/mgo/bson"
	"skygo_detection/guardian/src/net/qmap"

	"skygo_detection/common"
	"skygo_detection/custom_util"
	"skygo_detection/lib/common_lib/http_ctx"
	"skygo_detection/lib/common_lib/mongo"
	"skygo_detection/lib/common_lib/orm"
	"skygo_detection/lib/common_lib/request"
	"skygo_detection/lib/common_lib/response"
	"skygo_detection/lib/common_lib/session"
	"skygo_detection/mongo_model"
	"skygo_detection/service"
)

type EvaluateVulnerabilityController struct{}

//@auto_generated_api_begin
/**
 * apiType http
 * @api {get} /api/v1/evaluate_vulnerabilities 查询所有漏洞
 * @apiVersion 0.1.0
 * @apiName GetAll
 * @apiGroup EvaluateVulnerability
 *
 * @apiDescription 查询所有漏洞
 *
 * @apiUse authHeader
 *
 * @apiUse urlQueryParams
 *
 * @apiSuccessExample {json} 请求成功示例:
 * {
 *     "code": 0,
 *     "data": {
 *         "list": [
 *             {
 *                 "_id": "5fe6cd4c24b6475c432d2343",
 *                 "asset_id": "US4VY61L",
 *                 "asset_version": "1.0",
 *                 "describe": "漏洞描述",
 *                 "evaluate_task_id": "5fe464b1f98f923e40e8dd5e",
 *                 "influence": "漏洞影响范围",
 *                 "item_id": "12314123",
 *                 "last_update_op_id": 0,
 *                 "level": 2,
 *                 "name": "漏洞名称",
 *                 "op_id": 0,
 *                 "project_id": "5fd7218624b64712a27f47e8",
 *                 "record_id": "5fe464b1f98f923e40e8dd5f",
 *                 "risk_type": "配置",
 *                 "status": 0,
 *                 "suggest": [
 *                     {
 *                         "caution": "修复建议-注意事项",
 *                         "importance": "必要",
 *                         "repair_cost": "修复建议-修复成本",
 *                         "repair_effect": "修复建议-修复效果"
 *                     }
 *                 ],
 *                 "tag": [],
 *                 "test_phase": 0
 *             }
 *         ],
 *         "pagination": {
 *             "count": 2,
 *             "current_page": 1,
 *             "per_page": 20,
 *             "total": 2,
 *             "total_pages": 1
 *         }
 *     }
 * }
 */
func (this EvaluateVulnerabilityController) GetAll(ctx *gin.Context) {
	req := &qmap.QM{}
	*req = req.Merge(*request.GetRequestBody(ctx))
	*req = req.Merge(*request.GetRequestQueryParams(ctx))

	queryParams, err := url.QueryUnescape(ctx.Request.URL.RawQuery)
	if err != nil {
		queryParams = req.String("query_params")
	}
	mgoSession := mongo.NewMgoSession(common.MC_EVALUATE_VULNERABILITY)
	idReg := regexp.MustCompile(`\"_id\":{\"e\":\"([\w\d]*)\"}\,?`)
	if params := idReg.FindStringSubmatch(queryParams); len(params) == 2 {
		queryParams = strings.Replace(queryParams, params[0], "", 1)
		mgoSession.AddUrlQueryCondition(queryParams)
		id := bson.NewObjectId()
		if bson.IsObjectIdHex(params[1]) {
			id = bson.ObjectIdHex(params[1])
		}
		idQuery := qmap.QM{
			"e__id": id,
		}
		mgoSession.AddCondition(idQuery)
	} else {
		mgoSession.AddUrlQueryCondition(queryParams)
	}

	EvaluateAssetTransformer := func(data qmap.QM) qmap.QM {
		opId := data.MustInt("op_id")
		lastUpdateOpId := data.MustInt("last_update_op_id")
		data["op_name"] = mongo_model.GetUserName(int(opId), ctx)
		data["last_update_op_name"] = mongo_model.GetUserName(int(lastUpdateOpId), ctx)

		// 项目名称
		if project, err := new(mongo_model.Project).One(data["project_id"].(string)); err != nil {
			data["project_name"] = ""
		} else {
			data["project_name"] = project.Name
		}

		// 获得资产名称
		if model, err := new(mongo_model.EvaluateAsset).One(data["asset_id"].(string)); err != nil {
			data["asset_name"] = ""
		} else {
			data["asset_name"] = model.Name
		}

		return data
	}

	// // -------各类条件查询---------
	// // 资产id
	// if assetId := req.String("asset_id"); assetId != "" {
	// 	mgoSession.AddCondition(qmap.QM{
	// 		"e_asset_id" : assetId,
	// 	})
	// }
	//
	// // 漏洞id
	// if vulId := req.String("vul_id"); vulId != "" {
	// 	mgoSession.AddCondition(qmap.QM{
	// 		"e__id" : bson.ObjectIdHex(vulId),
	// 	})
	// }
	//
	// // 漏洞name
	// if name := req.String("name"); name != "" {
	// 	mgoSession.AddCondition(qmap.QM{
	// 		"l_name" : name,
	// 	})
	// }
	//
	// // 提交人
	// if opId := req.Int("op_id"); opId >0 {
	// 	mgoSession.AddCondition(qmap.QM{
	// 		"e_op_id" : opId,
	// 	})
	// }
	//
	// // 标签， 只要包含就行
	// if tag := req.String("tag"); tag != "" {
	// 	mgoSession.AddCondition(qmap.QM{
	// 		"e_tag" : tag,
	// 	})
	// }

	// 更新时间
	// todo 没有这个字段
	//
	// 测试模板
	// todo 目前没这个字段
	//
	// 测试分类/测试子类
	// todo 目前连表不支持

	mgoSession.SetTransformFunc(EvaluateAssetTransformer)
	if res, err := mgoSession.GetPage(); err == nil {
		response.RenderSuccess(ctx, res)
	} else {
		response.RenderFailure(ctx, err)
	}
}

/**
 * apiType http
 * @api {get} /api/v1/evaluate_vulnerabilities/:id 查询单条漏洞
 * @apiVersion 0.1.0
 * @apiName GetOne
 * @apiGroup EvaluateVulnerability
 *
 * @apiDescription 查询单条漏洞
 *
 * @apiUse authHeader
 *
 * @apiParam {string}		id						漏洞id
 *
 * @apiSuccessExample {json} 请求成功示例:
 * {
 *         "code": 0,
 *         "data": {
 *                 "_id": "5fe6cd4c24b6475c432d2343",
 *                 "asset_id": "US4VY61L",
 *                 "asset_version": "1.0",
 *                 "describe": "漏洞描述",
 *                 "evaluate_task_id": "5fe464b1f98f923e40e8dd5e",
 *                 "influence": "漏洞影响范围",
 *                 "item_id": "12314123",
 *                 "last_update_op_id": 0,
 *                 "level": 2,
 *                 "name": "漏洞名称",
 *                 "op_id": 0,
 *                 "project_id": "5fd7218624b64712a27f47e8",
 *                 "record_id": "5fe464b1f98f923e40e8dd5f",
 *                 "risk_type": "配置",
 *                 "status": 0,
 *                 "suggest": [
 *                         {
 *                                 "caution": "修复建议-注意事项",
 *                                 "importance": "必要",
 *                                 "repair_cost": "修复建议-修复成本",
 *                                 "repair_effect": "修复建议-修复效果"
 *                         }
 *                 ],
 *                 "tag": [],
 *                 "test_phase": 0
 *         }
 * }
 */
func (this EvaluateVulnerabilityController) GetOne(ctx *gin.Context) {
	req := &qmap.QM{}
	*req = req.Merge(*request.GetRequestBody(ctx))
	*req = req.Merge(*request.GetRequestQueryParams(ctx))
	(*req)["id"] = ctx.Param("id")
	(*req)["query_params"] = ctx.Request.URL.RawQuery

	params := qmap.QM{
		"e__id": bson.ObjectIdHex(req.MustString("id")),
	}
	ormSession := mongo.NewMgoSessionWithCond(common.MC_EVALUATE_VULNERABILITY, params)

	EvaluateAssetTransformer := func(data qmap.QM) qmap.QM {
		opId := data.MustInt("op_id")
		lastUpdateOpId := data.MustInt("last_update_op_id")
		data["op_name"] = mongo_model.GetUserName(int(opId), ctx)
		data["last_update_op_name"] = mongo_model.GetUserName(int(lastUpdateOpId), ctx)

		// 项目名称
		if project, err := new(mongo_model.Project).One(data["project_id"].(string)); err != nil {
			data["project_name"] = ""
		} else {
			data["project_name"] = project.Name
		}

		// 获得资产名称
		if model, err := new(mongo_model.EvaluateAsset).One(data["asset_id"].(string)); err != nil {
			data["asset_name"] = ""
		} else {
			data["asset_name"] = model.Name
		}

		// 获得时间轴
		vulId := data["_id"].(bson.ObjectId).Hex()
		models := new(mongo_model.EvaluateVulnerabilityLog).FindAllByVulId(vulId)
		data["logs"] = models
		return data
	}

	ormSession.SetTransformFunc(EvaluateAssetTransformer)

	if res, err := ormSession.GetOne(); err != nil {
		response.RenderFailure(ctx, err)
	} else {
		response.RenderSuccess(ctx, res)
	}
}

/**
 * apiType http
 * @api {get} /api/v1/evaluate_vulnerability/evaluate_task 查询所有项目漏洞列表
 * @apiVersion 0.1.0
 * @apiName GetTaskVulAll
 * @apiGroup EvaluateVulnerability
 *
 * @apiDescription 查询所有项目漏洞列表
 *
 * @apiParam {string}		evaluate_task_id			项目任务id
 *
 * @apiUse authHeader
 *
 * @apiUse urlQueryParams
 *
 * @apiSuccessExample {json} 请求成功示例:
 * {
 *     "code": 0,
 *     "data": {
 *         "list": [
 *             {
 *                 "_id": "5fe6cd4c24b6475c432d2343",
 *                 "asset_id": "US4VY61L",
 *                 "asset_version": "1.0",
 *                 "describe": "漏洞描述",
 *                 "evaluate_task_id": "5fe464b1f98f923e40e8dd5e",
 *                 "influence": "漏洞影响范围",
 *                 "item_id": "12314123",
 *                 "last_update_op_id": 0,
 *                 "level": 2,
 *                 "name": "漏洞名称",
 *                 "op_id": 0,
 *                 "project_id": "5fd7218624b64712a27f47e8",
 *                 "record_id": "5fe464b1f98f923e40e8dd5f",
 *                 "risk_type": "配置",
 *                 "status": 0,
 *                 "suggest": [
 *                     {
 *                         "caution": "修复建议-注意事项",
 *                         "importance": "必要",
 *                         "repair_cost": "修复建议-修复成本",
 *                         "repair_effect": "修复建议-修复效果"
 *                     }
 *                 ],
 *                 "tag": [],
 *                 "test_phase": 0
 *             }
 *         ],
 *         "pagination": {
 *             "count": 2,
 *             "current_page": 1,
 *             "per_page": 20,
 *             "total": 2,
 *             "total_pages": 1
 *         }
 *     }
 * }
 */
func (this EvaluateVulnerabilityController) GetTaskVulAll(ctx *gin.Context) {
	req := &qmap.QM{}
	*req = req.Merge(*request.GetRequestBody(ctx))
	*req = req.Merge(*request.GetRequestQueryParams(ctx))
	(*req)["id"] = ctx.Param("id")
	(*req)["query_params"] = ctx.Request.URL.RawQuery

	evaluateTaskId := req.MustString("evaluate_task_id")
	queryParams := req.String("query_params")
	mgoSession := mongo.NewMgoSession(common.MC_EVALUATE_TASK_VULNERABILITY).AddUrlQueryCondition(queryParams)
	mgoSession.AddCondition(qmap.QM{"e_evaluate_task_id": evaluateTaskId})
	if res, err := mgoSession.GetPage(); err != nil {
		response.RenderFailure(ctx, err)
	} else {
		response.RenderSuccess(ctx, res)
	}
}

/**
 * apiType http
 * @api {get} /api/v1/evaluate_vulnerability/evaluate_task/:id 查询项目单条漏洞
 * @apiVersion 0.1.0
 * @apiName GetTaskVulOne
 * @apiGroup EvaluateVulnerability
 *
 * @apiDescription 查询项目单条漏洞
 *
 * @apiUse authHeader
 *
 * @apiParam {string}		id						漏洞id
 *
 * @apiSuccessExample {json} 请求成功示例:
 * {
 *         "code": 0,
 *         "data": {
 *                 "_id": "5fe6cd4c24b6475c432d2343",
 *                 "asset_id": "US4VY61L",
 *                 "asset_version": "1.0",
 *                 "describe": "漏洞描述",
 *                 "evaluate_task_id": "5fe464b1f98f923e40e8dd5e",
 *                 "influence": "漏洞影响范围",
 *                 "item_id": "12314123",
 *                 "last_update_op_id": 0,
 *                 "level": 2,
 *                 "name": "漏洞名称",
 *                 "op_id": 0,
 *                 "project_id": "5fd7218624b64712a27f47e8",
 *                 "record_id": "5fe464b1f98f923e40e8dd5f",
 *                 "risk_type": "配置",
 *                 "status": 0,
 *                 "suggest": [
 *                         {
 *                                 "caution": "修复建议-注意事项",
 *                                 "importance": "必要",
 *                                 "repair_cost": "修复建议-修复成本",
 *                                 "repair_effect": "修复建议-修复效果"
 *                         }
 *                 ],
 *                 "tag": [],
 *                 "test_phase": 0
 *         }
 * }
 */
func (this EvaluateVulnerabilityController) GetTaskVulOne(ctx *gin.Context) {
	req := &qmap.QM{}
	*req = req.Merge(*request.GetRequestBody(ctx))
	*req = req.Merge(*request.GetRequestQueryParams(ctx))
	(*req)["id"] = ctx.Param("id")
	(*req)["query_params"] = ctx.Request.URL.RawQuery

	vulId := req.MustString("id")
	params := qmap.QM{
		"e_vul_id": vulId,
	}
	ormSession := mongo.NewMgoSessionWithCond(common.MC_EVALUATE_TASK_VULNERABILITY, params)

	if res, err := ormSession.GetOne(); err != nil {
		response.RenderFailure(ctx, err)
	} else {
		response.RenderSuccess(ctx, res)
	}
}

/**
 * apiType http
 * @api {post} /api/v1/evaluate_vulnerability/evaluate_task 添加项目任务漏洞
 * @apiVersion 0.1.0
 * @apiName TaskVulCreate
 * @apiGroup EvaluateVulnerability
 *
 * @apiDescription 添加项目任务漏洞
 *
 * @apiUse authHeader
 *
 * @apiParam {string}		item_id						测试用例id
 * @apiParam {string}		name						漏洞名称
 * @apiParam {int}			level						漏洞级别（ 0:提示 1:低危 2:中危 3:高危 4:严重 ）
 * @apiParam {int}			status						漏洞状态（0:未修复 1:已修复）
 * @apiParam {string}		risk_type					风险根源类型（弱密码、不安全的网络服务、不安全的生态接口、缺乏安全的更新机制、使用不安全或已遭弃用的组件、隐私保护不充分、不安全的数据传输和存储、缺乏设备管理、不安全的默认设置、缺乏物理加固措施）
 * @apiParam {string}		describe					漏洞描述
 * @apiParam {string}		influence					漏洞影响范围
 * @apiParam {json}			sketch_map					漏洞攻击示意图
 * @apiParam {json}			suggest						修复建议
 * @apiParam {string}		suggest.caution				修复建议-注意事项
 * @apiParam {string}		suggest.repair_cost			修复建议-修复成本(极低 低 中 高 极高)
 * @apiParam {string}		suggest.repair_effect		修复建议-修复效果(彻底 显著 基础)
 * @apiParam {string}		suggest.importance			修复建议-重要程度(必要 推荐 可选)
 *
 * @apiParamExample {json}  请求参数示例:
 *	{
 *		"item_id": "12314123",
 *		"name": "漏洞名称",
 *		"level": 2,
 *		"status": 0,
 *		"risk_type":"配置",
 *		"describe": "漏洞描述",
 *		"influence": "漏洞影响范围",
 *      "sketch_map": [
 *			{
 *         			"name":"图片",
 *         			"value":"dadfa124"
 *			}
 *     ],
 *		"suggest": [
 *			{
 *				"caution":"修复建议-注意事项",
 *				"repair_cost":"修复建议-修复成本",
 *				"repair_effect":"修复建议-修复效果",
 *				"importance":"必要"
 *			}
 *		]
 *	}
 *
 * @apiSuccessExample {json} 请求成功示例:
 *	{
 *		"code": 0
 *	}
 */
func (this EvaluateVulnerabilityController) TaskVulCreate(ctx *gin.Context) {
	req := &qmap.QM{}
	*req = req.Merge(*request.GetRequestBody(ctx))
	*req = req.Merge(*request.GetRequestQueryParams(ctx))
	(*req)["id"] = ctx.Param("id")
	(*req)["query_params"] = ctx.Request.URL.RawQuery

	if testItem, err := new(mongo_model.EvaluateTaskVulnerability).Create(*req, session.GetUserId(http_ctx.GetHttpCtx(ctx))); err == nil {
		response.RenderSuccess(ctx, testItem)
	} else {
		response.RenderFailure(ctx, err)
	}

}

/**
 * apiType http
 * @api {put} /api/v1/evaluate_vulnerability/evaluate_task/:id  更新项目任务漏洞信息
 * @apiVersion 0.1.0
 * @apiName TaskVulUpdate
 * @apiGroup EvaluateVulnerability
 *
 * @apiDescription 更新项目任务漏洞信息
 *
 * @apiParam {string}		id							漏洞id
 * @apiParam {string}		[item_id]					测试用例id
 * @apiParam {string}		[name]						漏洞名称
 * @apiParam {int}			[level]						漏洞级别（ 0:提示 1:低危 2:中危 3:高危 4:严重 ）
 * @apiParam {string}		[risk_type]					风险根源类型（弱密码、不安全的网络服务、不安全的生态接口、缺乏安全的更新机制、使用不安全或已遭弃用的组件、隐私保护不充分、不安全的数据传输和存储、缺乏设备管理、不安全的默认设置、缺乏物理加固措施）
 * @apiParam {string}		[describe]					漏洞描述
 * @apiParam {string}		[influence]					漏洞影响范围
 * @apiParam {json}			[sketch_map]				漏洞攻击示意图
 * @apiParam {json}			[suggest]					修复建议
 * @apiParam {string}		[suggest.caution]			修复建议-注意事项
 * @apiParam {string}		[suggest.repair_cost]		修复建议-修复成本(极低 低 中 高 极高)
 * @apiParam {string}		[suggest.repair_effect]		修复建议-修复效果(彻底 显著 基础)
 * @apiParam {string}		[suggest.importance]		修复建议-重要程度(必要 推荐 可选)
 *
 * @apiParamExample {json}  请求参数示例:
 *	{
 *		"id": "5fe6cd4124b6475c432d2342",
 *		"item_id": "12314123",
 *		"name": "漏洞名称",
 *		"level": 2,
 *		"status": 0,
 *		"risk_type":"配置",
 *		"describe": "漏洞描述",
 *		"influence": "漏洞影响范围",
 *      "sketch_map": [
 *			{
 *         			"name":"图片",
 *         			"value":"dadfa124"
 *			}
 *     ],
 *		"suggest": [
 *			{
 *				"caution":"修复建议-注意事项",
 *				"repair_cost":"修复建议-修复成本",
 *				"repair_effect":"修复建议-修复效果",
 *				"importance":"必要"
 *			}
 *		]
 *	}
 *
 * @apiSuccessExample {json} 请求成功示例:
 *	{
 *		"code": 0
 *	}
 */
func (this EvaluateVulnerabilityController) TaskVulUpdate(ctx *gin.Context) {
	req := &qmap.QM{}
	*req = req.Merge(*request.GetRequestBody(ctx))
	*req = req.Merge(*request.GetRequestQueryParams(ctx))
	(*req)["id"] = ctx.Param("id")
	(*req)["query_params"] = ctx.Request.URL.RawQuery

	id := req.MustString("id")
	if item, err := new(mongo_model.EvaluateTaskVulnerability).Update(id, *req, int(session.GetUserId(http_ctx.GetHttpCtx(ctx)))); err == nil {
		response.RenderSuccess(ctx, item)
	} else {
		response.RenderFailure(ctx, err)
	}
}

/**
 * apiType http
 * @api {delete} /api/v1/evaluate_vulnerability/evaluate_task  批量删除项目任务漏洞
 * @apiVersion 0.1.0
 * @apiName TaskVulBulkDelete
 * @apiGroup EvaluateVulnerability
 *
 * @apiDescription 批量删除漏洞
 *
 * @apiUse authHeader
 *
 * @apiParam {[]string}           ids                      漏洞id
 *
 * @apiParamExample {json}  请求参数示例:
 *    {
 *		"ids": [
 *			"5f3f7e1a5d5026796609f3d7"
 *		]
 *	}
 *
 * @apiSuccessExample {json} 请求成功示例:
 *	{
 *		"code": 0,
 *     "data": {
 *			"failure_number":0,
 *			"success_number":1
 *     }
 *	}
 */
func (this EvaluateVulnerabilityController) TaskVulBulkDelete(ctx *gin.Context) {
	req := &qmap.QM{}
	*req = req.Merge(*request.GetRequestBody(ctx))
	*req = req.Merge(*request.GetRequestQueryParams(ctx))
	(*req)["id"] = ctx.Param("id")
	(*req)["query_params"] = ctx.Request.URL.RawQuery

	total := 0
	successNum := 0
	if _, has := req.TrySlice("ids"); has {
		ids := req.SliceString("ids")
		total = len(ids)
		idsObject := []bson.ObjectId{}
		for _, id := range ids {
			idsObject = append(idsObject, bson.ObjectIdHex(id))
		}
		// 删除测试漏洞
		match := bson.M{
			"_id": bson.M{"$in": idsObject},
		}
		if changeInfo, err := mongo.NewMgoSession(common.MC_EVALUATE_TASK_VULNERABILITY).RemoveAll(match); err == nil {
			successNum = changeInfo.Removed
		} else {
			response.RenderFailure(ctx, err)
			return
		}
	}
	response.RenderSuccess(ctx, qmap.QM{"failure_number": total - successNum, "success_number": successNum})
}

/**
 * apiType http
 * @api {get} /api/v1/evaluate_vulnerability/item_vulnerabilities 查询测试用例关联的所有漏洞
 * @apiVersion 0.1.0
 * @apiName GetItemVulnerabilities
 * @apiGroup EvaluateVulnerability
 *
 * @apiDescription 查询测试用例关联的所有漏洞
 *
 * @apiUse authHeader
 *
 * @apiParam {string}           item_id                      测试用例id
 *
 * @apiSuccessExample {json} 请求成功示例:
 * {
 *         "code": 0,
 *         "data": {
 *                 "_id": "5fe6cd4c24b6475c432d2343",
 *                 "asset_id": "US4VY61L",
 *                 "asset_version": "1.0",
 *                 "describe": "漏洞描述",
 *                 "evaluate_task_id": "5fe464b1f98f923e40e8dd5e",
 *                 "influence": "漏洞影响范围",
 *                 "item_id": "12314123",
 *                 "last_update_op_id": 0,
 *                 "level": 2,
 *                 "name": "漏洞名称",
 *                 "op_id": 0,
 *                 "project_id": "5fd7218624b64712a27f47e8",
 *                 "record_id": "5fe464b1f98f923e40e8dd5f",
 *                 "risk_type": "配置",
 *                 "status": 0,
 *                 "suggest": [
 *                         {
 *                                 "caution": "修复建议-注意事项",
 *                                 "importance": "必要",
 *                                 "repair_cost": "修复建议-修复成本",
 *                                 "repair_effect": "修复建议-修复效果"
 *                         }
 *                 ],
 *                 "tag": [],
 *                 "test_phase": 0
 *         }
 * }
 */
func (this EvaluateVulnerabilityController) GetItemVulnerabilities(ctx *gin.Context) {
	req := &qmap.QM{}
	*req = req.Merge(*request.GetRequestBody(ctx))
	*req = req.Merge(*request.GetRequestQueryParams(ctx))
	// (*req)["id"] = ctx.Param("id")
	// (*req)["query_params"] = ctx.Request.URL.RawQuery

	params := qmap.QM{
		"e_item_id": req.MustString("item_id"),
	}
	ormSession := mongo.NewMgoSessionWithCond(common.MC_EVALUATE_VULNERABILITY, params)
	ormSession.AddSorter("_id", orm.ASCENDING)
	ormSession.SetLimit(1000000)
	if list, err := ormSession.Get(); err == nil {
		response.RenderSuccess(ctx, list)
	} else {
		response.RenderFailure(ctx, err)
	}

}

/**
 * apiType http
 * @api {get} /api/v1/evaluate_vulnerability/item_task_vulnerabilities 查询测试用例关联的项目漏洞
 * @apiVersion 0.1.0
 * @apiName GetItemTaskVulnerabilities
 * @apiGroup EvaluateVulnerability
 *
 * @apiDescription 查询测试用例关联的项目漏洞
 *
 * @apiUse authHeader
 *
 * @apiParam {string}           item_id                      测试用例id
 * @apiParam {string}           evaluate_task_id             项目任务id
 *
 * @apiSuccessExample {json} 请求成功示例:
 * {
 *         "code": 0,
 *         "data": {
 *                 "_id": "5fe6cd4c24b6475c432d2343",
 *                 "asset_id": "US4VY61L",
 *                 "asset_version": "1.0",
 *                 "describe": "漏洞描述",
 *                 "evaluate_task_id": "5fe464b1f98f923e40e8dd5e",
 *                 "influence": "漏洞影响范围",
 *                 "item_id": "12314123",
 *                 "last_update_op_id": 0,
 *                 "level": 2,
 *                 "name": "漏洞名称",
 *                 "op_id": 0,
 *                 "project_id": "5fd7218624b64712a27f47e8",
 *                 "record_id": "5fe464b1f98f923e40e8dd5f",
 *                 "risk_type": "配置",
 *                 "status": 0,
 *                 "suggest": [
 *                         {
 *                                 "caution": "修复建议-注意事项",
 *                                 "importance": "必要",
 *                                 "repair_cost": "修复建议-修复成本",
 *                                 "repair_effect": "修复建议-修复效果"
 *                         }
 *                 ],
 *                 "tag": [],
 *                 "test_phase": 0
 *         }
 * }
 */
func (this EvaluateVulnerabilityController) GetItemTaskVulnerabilities(ctx *gin.Context) {
	req := &qmap.QM{}
	*req = req.Merge(*request.GetRequestBody(ctx))
	*req = req.Merge(*request.GetRequestQueryParams(ctx))
	// (*req)["id"] = ctx.Param("id")
	// (*req)["query_params"] = ctx.Request.URL.RawQuery

	evaluateTaskId := req.MustString("evaluate_task_id")
	if evaluateTask, err := new(mongo_model.EvaluateTask).GetOne(evaluateTaskId); err == nil {
		collectionName := common.MC_EVALUATE_VULNERABILITY
		params := qmap.QM{
			"e_item_id": req.MustString("item_id"),
		}
		if evaluateTask.Int("status") >= common.PTS_TEST {
			// 如果项目任务处于测试及以后的阶段，直接从漏洞关系表中查询漏洞
			collectionName = common.MC_EVALUATE_TASK_VULNERABILITY
			// 查询条件中添加项目任务id
			params["e_evaluate_task_id"] = evaluateTaskId
		}
		ormSession := mongo.NewMgoSessionWithCond(collectionName, params)
		ormSession.AddSorter("_id", orm.ASCENDING)
		ormSession.SetLimit(1000000)
		if list, err := ormSession.Get(); err == nil {
			response.RenderSuccess(ctx, list)
			return
		} else {
			response.RenderFailure(ctx, err)
			return
		}
	} else {
		response.RenderFailure(ctx, err)
		return
	}

}

// @auto_generated_api_end
func (this EvaluateVulnerabilityController) Export(ctx *gin.Context) {
	if resp, err := this.export(ctx); err == nil {
		excelObj := new(service.ExcelObj)
		excelObj.NewExcel()

		index := excelObj.NewSheet()
		excelObj.ContentTitle = []string{"项目名称", "", "", "", "", "", "", "测试件对接人", "", "", "", "", "", "", "安全团队"}
		excelObj.WriteTitle()
		excelObj.Content = []interface{}{"序号", "漏洞编号", "漏洞名称", "问题描述", "漏洞等级", "修复建议", "测试对象", "漏洞状态", "对策方案", "对策周期", "对策成本", "更改后影响", "责任工程师", "担当修复可行性判断", "安全评审结果"}
		excelObj.WriteContent()
		excelObj.ExcelFile.SetActiveSheet(index)

		if val, exist := resp["data"]; exist {
			num := 1
			for _, data := range val.(qmap.QM) {
				itemData := data.(map[string]interface{})
				id := itemData["id"]
				name := itemData["name"]
				suggest := itemData["suggest"]
				describe := itemData["describe"]
				target := itemData["target"]

				level := "提示"
				if itemData["level"] == float64(1) {
					level = "低危"
				} else if itemData["level"] == float64(2) {
					level = "中危"
				} else if itemData["level"] == float64(3) {
					level = "高危"
				} else if itemData["level"] == float64(4) {
					level = "严重"
				}

				//status := "未修复"
				//if itemData["status"] == float64(1) {
				//	status = "已修复"
				//} else if itemData["status"] == float64(2) {
				//	status = "重打开"
				//}
				excelObj.Content = []interface{}{strconv.Itoa(num), id, name, describe, level, suggest, target}
				excelObj.WriteContent()
				excelObj.ExcelFile.SetActiveSheet(index)
				num++
			}
		}

		data := excelObj.Output()
		ctx.Writer.WriteHeader(http.StatusOK)
		ctx.Header("Content-Disposition", fmt.Sprintf("attachment; filename=%s", "report.xlsx"))
		ctx.Header("Content-Type", "*")
		ctx.Header("Accept-Length", fmt.Sprintf("%d", len(data.Bytes())))
		ctx.Writer.Write(data.Bytes())
	} else {
		panic(err)
	}
}

func (this EvaluateVulnerabilityController) export(ctx *gin.Context) (qmap.QM, error) {
	req := &qmap.QM{}
	*req = req.Merge(*request.GetRequestBody(ctx))
	*req = req.Merge(*request.GetRequestQueryParams(ctx))
	(*req)["id"] = ctx.Param("id")
	// (*req)["query_params"] = ctx.Request.URL.RawQuery

	params := qmap.QM{
		"e_project_id": req.MustString("id"),
	}

	items, err := mongo.NewMgoSessionWithCond(common.MC_EVALUATE_VULNERABILITY, params).Get()
	if err != nil {
		return nil, err
	}
	result := qmap.QM{}
	for index, item := range *items {

		var id, name, describe, target string
		var suggest interface{}
		var level, status int

		if item["_id"] != nil {
			id = item["_id"].(bson.ObjectId).Hex()
		}
		if item["name"] != nil {
			name = item["name"].(string)
		}
		if item["suggest"] != nil {
			suggest = item["suggest"].(interface{})
		}
		if item["describe"] != nil {
			describe = item["describe"].(string)
		}
		if item["status"] != nil {
			status = item["status"].(int)
		}
		if item["level"] != nil {
			level = item["level"].(int)
		}
		if item["target_id"] != nil {
			targetInfo, targetErr := mongo.NewMgoSessionWithCond(common.MC_EVALUATE_ASSET, qmap.QM{"e__id": bson.ObjectIdHex(item["target_id"].(string))}).GetOne()
			custom_util.CheckErr(targetErr)
			target = (*targetInfo)["name"].(string)
		}
		arr := map[string]interface{}{
			"id":       id,
			"name":     name,
			"level":    level,
			"status":   status,
			"suggest":  suggest,
			"describe": describe,
			"target":   target,
		}
		result[strconv.Itoa(index)] = arr
	}
	return result, nil
}

/**
 * apiType http
 * @api {post} /api/v1/evaluate_vulnerability/tag  添加漏洞tag
 * @apiVersion 0.1.0
 * @apiName EditTag
 * @apiGroup EvaluateVulnerability
 *
 * @apiDescription 添加漏洞tag，必须提供漏洞ID
 *
 * @apiUse authHeader
 *
 * @apiParam {string}           project_id    		    项目ID
 * @apiParam {string}           vulnerability_id    	测试项ID
 * @apiParam {string}           tag     			    测试项tag
 *
 *curl http://10.16.133.118:3001/api/v1/evaluate_vulnerability/tag
 *
 * @apiParamExample {json}  请求参数示例:
 *
 *	{
 *		"project_id":"5f4cbd796e655c20df5a7dd9",
 *		"vulnerability_id":"5f4cc2245d502632fcf5bef7",
 *		"tag":"w1,w2"
 *	}
 *
 * @apiSuccessExample {json} 请求成功示例:
 *	{
 *		"code": 0
 *	}
 */
func (this EvaluateVulnerabilityController) EidtTag(ctx *gin.Context) {
	req := &qmap.QM{}
	*req = req.Merge(*request.GetRequestBody(ctx))
	*req = req.Merge(*request.GetRequestQueryParams(ctx))
	// (*req)["id"] = ctx.Param("id")
	// (*req)["query_params"] = ctx.Request.URL.RawQuery

	vulnerabilityId := req.MustString("vulnerability_id")
	params := bson.M{
		"_id": bson.ObjectIdHex(vulnerabilityId),
	}

	tags := []string{}
	tag := req.MustString("tag")
	if tag != "" {
		tags = strings.Split(tag, ",")
	}

	update := bson.M{
		"$set": bson.M{
			"tag": tags,
		},
	}
	if err := mongo.NewMgoSession(common.MC_EVALUATE_VULNERABILITY).Update(params, update); err != nil {
		response.RenderFailure(ctx, err)
	} else {
		response.RenderSuccess(ctx, gin.H{})
	}

}

/**
 * apiType http
 * @api {get} /api/v1/evaluate_vulnerability/get_tag/:id 获取漏洞tag
 * @apiVersion 0.1.0
 * @apiName GetTag
 * @apiGroup EvaluateVulnerability
 *
 * @apiDescription 获取漏洞tag
 *
 * @apiUse authHeader
 *
 * @apiParam {string}   id project_id
 * @apiParam {string}   vulnerability_id 测试项id（存在该id，代表只查询该测试项。否则查询所有测试项）
 *
 * curl http://10.16.133.118:3001/api/v1/evaluate_vulnerability/get_tag/5f4cbd796e655c20df5a7dd9?item_id=5f4cc2245d502632fcf5bef7
 *
 * @apiSuccessExample {json} 请求成功示例:
 *
 *     {
 *         "code": 0,
 *         "data": {
 *             "tag": [
 *                 "w1",
 *                 "w2"
 *             ]
 *         }
 *     }
 */
func (this EvaluateVulnerabilityController) GetTag(ctx *gin.Context) {
	req := &qmap.QM{}
	*req = req.Merge(*request.GetRequestBody(ctx))
	*req = req.Merge(*request.GetRequestQueryParams(ctx))
	(*req)["id"] = ctx.Param("id")
	// (*req)["query_params"] = ctx.Request.URL.RawQuery

	projectId := req.MustString("id")
	params := qmap.QM{
		"e_project_id": projectId,
	}
	if itemId, has := req.TryString("vulnerability_id"); has {
		params["e__id"] = bson.ObjectIdHex(itemId)
	}
	ormSession := mongo.NewMgoSessionWithCond(common.MC_EVALUATE_VULNERABILITY, params)
	tagKeys := qmap.QM{}
	qm := make([]string, 0)
	if items, err := ormSession.SetLimit(10000).Get(); err == nil {
		for _, item := range *items {
			var qm qmap.QM = item
			if tags, has := qm.TrySlice("tag"); has {
				for _, tag := range tags {
					tagKeys[tag.(string)] = 1
				}
			}
		}
		for k := range tagKeys {
			qm = append(qm, k)
		}
		result := &qmap.QM{
			"tag": qm,
		}
		response.RenderSuccess(ctx, result)
	} else {
		response.RenderFailure(ctx, err)
	}
}

func (this EvaluateVulnerabilityController) GetAllTags(ctx *gin.Context) {
	req := &qmap.QM{}
	*req = req.Merge(*request.GetRequestBody(ctx))
	*req = req.Merge(*request.GetRequestQueryParams(ctx))

	params := qmap.QM{}

	ormSession := mongo.NewMgoSessionWithCond(common.MC_EVALUATE_VULNERABILITY, params)
	tagKeys := qmap.QM{}
	qm := make([]string, 0)
	if items, err := ormSession.SetLimit(10000).Get(); err == nil {
		for _, item := range *items {
			var qm qmap.QM = item
			if tags, has := qm.TrySlice("tag"); has {
				for _, tag := range tags {
					tagKeys[tag.(string)] = 1
				}
			}
		}
		for k := range tagKeys {
			if k != "" {
				qm = append(qm, k)
			}
		}
		result := &qmap.QM{
			"tag": qm,
		}
		response.RenderSuccess(ctx, result)
	} else {
		response.RenderFailure(ctx, err)
	}
}
