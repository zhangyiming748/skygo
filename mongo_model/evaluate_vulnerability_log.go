package mongo_model

import (
	"time"

	"github.com/globalsign/mgo/bson"

	"skygo_detection/common"
	"skygo_detection/lib/common_lib/mongo"
)

/*
*
打算使用日志记录，但是发现可以不用，待删除
*/
type EvaluateVulnerabilityLog struct {
	Id                        bson.ObjectId              `bson:"_id,omitempty" json:"_id"`
	VulId                     string                     `bson:"vul_id" json:"vul_id"`                                           //漏洞id
	CreateTime                int64                      `bson:"create_time" json:"create_time"`                                 // 创建时间
	EvaluateTaskVulnerability *EvaluateTaskVulnerability `bson:"evaluate_task_vulnerability" json:"evaluate_task_vulnerability"` // 任务中的漏洞信息快照
}

// --------------- 主漏洞日志信息记录，用于记录时间线 -----------------
// 根据主漏洞id，记录一条日志
func (l *EvaluateVulnerabilityLog) AddVulTimeLine(taskVulId string, opId int) error {
	if ev, err := new(EvaluateTaskVulnerability).One(taskVulId); err != nil {
		return err
	} else {
		logModel := new(EvaluateVulnerabilityLog)
		logModel.Id = bson.NewObjectId()
		logModel.VulId = ev.EvaluateVulnerabilityId
		logModel.EvaluateTaskVulnerability = ev
		logModel.CreateTime = time.Now().UnixNano() / 1e6

		return mongo.NewMgoSession(common.MC_EVALUATE_VULNERABILITY_LOG).Insert(logModel)
	}
}

func (l *EvaluateVulnerabilityLog) FindAllByVulId(vulId string) []EvaluateVulnerabilityLog {
	filter := bson.M{
		"vul_id": vulId,
	}

	models := make([]EvaluateVulnerabilityLog, 0)

	session := mongo.NewMgoSession(common.MC_EVALUATE_VULNERABILITY_LOG)
	session.Session.Find(filter).Sort("create_time").All(&models)
	return models
}
