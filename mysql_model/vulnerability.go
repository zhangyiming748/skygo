package mysql_model

import (
	"errors"
	"strings"
	"time"

	"github.com/gin-gonic/gin"
	"skygo_detection/guardian/app/sys_service"
	"skygo_detection/guardian/src/net/qmap"

	"skygo_detection/lib/common_lib/http_ctx"
	"skygo_detection/lib/common_lib/mysql"
)

type Vulnerability struct {
	Id           int    `xorm:"not null pk autoincr comment('主键id') INT(11)"`
	TaskId       int    `xorm:"comment('任务id') INT(10)"`
	TaskCaseId   int    `xorm:"comment('任务测试用例id') INT(10)"`
	CreateUserId int    `xorm:"comment('创建人id') INT(10)"`
	Name         string `xorm:"not null comment('漏洞名称') VARCHAR(255)"`
	Status       int    `xorm:"not null comment('漏洞状态（0:未修复 1:已修复 2:重打开）') TINYINT(3)"`
	RiskType     int    `xorm:"not null comment('漏洞类型') INT(3)"`
	CveId        string `xorm:"comment('cve id') VARCHAR(255)"`
	CnvdId       string `xorm:"comment('cnvd id') VARCHAR(255)"`
	CnnvdId      string `xorm:"comment('cnnvd id') VARCHAR(255)"`
	Level        int    `xorm:"not null comment('漏洞级别（ 0:提示 1:低危 2:中危 3:高危 4:严重 ）') TINYINT(3)"`
	Describe     string `xorm:"not null comment('漏洞描述') VARCHAR(255)"`
	SketchMap    string `xorm:"not null comment('漏洞示意图') TEXT"`
	Influence    string `xorm:"not null comment('影响范围') VARCHAR(1024)"`
	FixSuggest   string `xorm:"not null comment('修复建议') TEXT"`
	UpdateTime   int    `xorm:"not null comment('更新时间') INT(11)"`
	CreateTime   int    `xorm:"not null comment('创建时间') INT(11)"`
	Tag          string `xorm:"not null comment('创建时间') VARCHAR(255)"`
}

func (this *Vulnerability) Create() (int64, error) {
	return sys_service.NewSession().Session.InsertOne(this)
}

func (this *Vulnerability) Remove() (int64, error) {
	return sys_service.NewSession().Session.ID(this.Id).Delete(this)
}

func (this *Vulnerability) Insert(rawInfo qmap.QM, ctx *gin.Context) error {
	this.TaskId = rawInfo.MustInt("task_id")
	this.Name = rawInfo.MustString("name")
	this.TaskCaseId = rawInfo.MustInt("task_case_id")
	this.CreateUserId = int(http_ctx.GetUserId(ctx))
	this.RiskType = rawInfo.Int("risk_type")
	this.CveId = rawInfo.String("cve_id")
	this.CnvdId = rawInfo.String("cnvd_id")
	this.CnnvdId = rawInfo.String("cnnvd_id")
	this.Status = rawInfo.MustInt("status")
	this.Level = rawInfo.MustInt("level")
	this.Describe = rawInfo.MustString("describe")
	this.SketchMap = rawInfo.String("sketch_map")
	this.Influence = rawInfo.MustString("influence")
	this.FixSuggest = rawInfo.MustString("fix_suggest")
	this.UpdateTime = int(time.Now().Unix())
	this.CreateTime = int(time.Now().Unix())
	if _, err := this.Create(); err == nil {
		new(VulnerabilityLog).Insert(int(http_ctx.GetUserId(ctx)), http_ctx.GetUserName(ctx), this)
		return nil
	} else {
		return err
	}
}

func (this *Vulnerability) Update(id int, rawInfo qmap.QM) error {
	params := qmap.QM{
		"e_id": id,
	}
	has, _ := sys_service.NewSessionWithCond(params).GetOne(this)
	if has {
		if val, has := rawInfo.TryString("name"); has {
			this.Name = val
		}
		if val, has := rawInfo.TryInt("risk_type"); has {
			this.RiskType = val
		}
		if val, has := rawInfo.TryString("cve_id"); has {
			this.CveId = val
		}
		if val, has := rawInfo.TryString("cnvd_id"); has {
			this.CnvdId = val
		}
		if val, has := rawInfo.TryString("cnnvd_id"); has {
			this.CnnvdId = val
		}
		if val, has := rawInfo.TryInt("status"); has {
			this.Status = val
		}
		if val, has := rawInfo.TryInt("level"); has {
			this.Level = val
		}
		if val, has := rawInfo.TryInt("risk_type"); has {
			this.RiskType = val
		}
		if val, has := rawInfo.TryString("describe"); has {
			this.Describe = val
		}
		if val, has := rawInfo.TryString("sketch_map"); has {
			this.SketchMap = val
		}
		if val, has := rawInfo.TryString("influence"); has {
			this.Influence = val
		}
		if val, has := rawInfo.TryString("fix_suggest"); has {
			this.FixSuggest = val
		}
		this.UpdateTime = int(time.Now().Unix())
		_, err := sys_service.NewOrm().Table(this).ID(this.Id).Update(this)
		return err
	} else {
		return errors.New("Item not found")
	}
}

func (this *Vulnerability) AddTag(rawInfo qmap.QM) error {
	id := rawInfo.MustInt("id")
	this.Tag = rawInfo.String("tag")
	_, err := sys_service.NewOrm().Table(this).ID(id).Cols("tag").Update(this)
	return err
}

func (this *Vulnerability) GetTag(taskId int) []string {
	// todo 查询标签
	vuls := make([]Vulnerability, 0)
	mysql.GetSession().Where("task_id = ?", taskId).Find(&vuls)
	var tags = make([]string, 0)
	for _, vul := range vuls {
		tmp := vul.Tag
		if tmp == "" {
			continue
		}
		tmpTags := strings.Split(tmp, ",")
		tags = append(tags, tmpTags...)
	}
	return tags
}

func (this *Vulnerability) RemoveCaseVul(taskId, caseId int) error {
	vulIds := []int{}
	params := qmap.QM{
		"e_task_id":      taskId,
		"e_task_case_id": caseId,
	}
	if err := sys_service.NewSessionWithCond(params).Table(this).Cols("id").Find(&vulIds); err == nil {
		if len(vulIds) > 0 {
			logParams := qmap.QM{
				"in_vul_id": vulIds,
			}
			sys_service.NewSessionWithCond(logParams).Delete(new(VulnerabilityLog))
		}
		return nil
	} else {
		return err
	}
}
