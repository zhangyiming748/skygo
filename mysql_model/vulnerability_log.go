package mysql_model

import (
	"time"

	"skygo_detection/guardian/app/sys_service"

	"skygo_detection/common"
)

type VulnerabilityLog struct {
	Id               int    `xorm:"not null pk autoincr INT(11)"`
	VulId            int    `xorm:"comment('漏洞id') INT(11)"`
	VulName          string `xorm:"comment('漏洞名称') VARCHAR(255)"`
	UserId           int    `xorm:"comment('用户id') INT(11)"`
	UserName         string `xorm:"comment('用户名称') VARCHAR(255)"`
	TaskId           int    `xorm:"comment('任务id') INT(11)"`
	TaskName         string `xorm:"comment('任务名称') VARCHAR(255)"`
	Level            int    `xorm:"comment('日志级别(1:info, 2:warning 3:error)') TINYINT(11)"`
	Status           int    `xorm:"comment('漏洞状态') TINYINT(11)"`
	Message          string `xorm:"comment('描述') VARCHAR(255)"`
	PieceId          int    `xorm:"comment('测试件id') INT(10)"`
	PieceName        string `xorm:"not null comment('测试件名称') VARCHAR(255)"`
	PieceVersionId   int    `xorm:"comment('测试件版本id') INT(10)"`
	PieceVersionName string `xorm:"comment('测试件版本名称') VARCHAR(255)"`
	CreateTime       int    `xorm:"comment('创建时间') INT(11)"`
}

func (this *VulnerabilityLog) Create() (int64, error) {
	return sys_service.NewSession().Session.InsertOne(this)
}

func (this *VulnerabilityLog) Update(cols ...string) (int64, error) {
	return sys_service.NewSession().Session.Table(this).ID(this.Id).Cols(cols...).Update(this)
}

func (this *VulnerabilityLog) Remove() (int64, error) {
	return sys_service.NewSession().Session.ID(this.Id).Delete(this)
}

func (this *VulnerabilityLog) Insert(userId int, username string, vul *Vulnerability) (int64, error) {
	this.VulId = vul.Id
	this.VulName = vul.Name
	this.UserId = userId
	this.UserName = username
	this.Level = common.LOG_LEVEL_INFO
	this.Message = ""
	this.CreateTime = int(time.Now().Unix())
	if vul.TaskId > 0 {
		task := new(Task)
		if has, err := sys_service.NewSession().Session.Where("id = ?", vul.TaskId).Get(task); err == nil && has {
			this.TaskId = vul.TaskId
			this.TaskName = task.Name
			testPiece := new(AssetTestPiece)
			if has, err := sys_service.NewSession().Session.Where("id = ?", task.PieceId).Get(testPiece); err == nil && has {
				this.PieceId = task.PieceId
				this.PieceName = testPiece.Name
			}
			testPieceVersion := new(AssetTestPieceVersion)
			if has, err := sys_service.NewSession().Session.Where("id = ?", task.PieceVersionId).Get(testPieceVersion); err == nil && has {
				this.PieceVersionId = task.PieceVersionId
				this.PieceVersionName = testPieceVersion.Version
			}
		}
	}
	return this.Create()
}
