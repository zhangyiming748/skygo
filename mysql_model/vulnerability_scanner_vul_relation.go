package mysql_model

import (
	"skygo_detection/guardian/app/sys_service"

	"skygo_detection/lib/common_lib/mysql"
)

type VulnerabilityScannerVulRelation struct {
	Id           int    `xorm:"not null pk autoincr INT(11)"`
	TaskId       int    `xorm:"INT(11)"`
	TaskCaseId   int    `xorm:"INT(11)"`
	VulId        int    `xorm:"INT(11)"`
	ScannerVulId string `xorm:"VARCHAR(255)"`
}

func (this *VulnerabilityScannerVulRelation) Create() (int64, error) {
	return mysql.GetSession().InsertOne(this)
}

func (this *VulnerabilityScannerVulRelation) Update(cols ...string) (int64, error) {
	return mysql.GetSession().Table(this).ID(this.Id).Cols(cols...).Update(this)
}

func (this *VulnerabilityScannerVulRelation) Remove() (int64, error) {
	return mysql.GetSession().ID(this.Id).Delete(this)
}

func (this *VulnerabilityScannerVulRelation) Insert(taskId, taskCaseId, vulId int, scannerVulId string) (int64, error) {
	this.TaskId = taskId
	this.TaskCaseId = taskCaseId
	this.VulId = vulId
	this.ScannerVulId = scannerVulId
	return this.Create()
}

func (this *VulnerabilityScannerVulRelation) Delete(taskId, taskCaseId, vulId int) (int64, error) {
	session := sys_service.NewSession().Session
	if taskId > 0 {
		session.Where("task_id=?", taskId)
	}
	if taskCaseId > 0 {
		session.Where("task_case_id=?", taskCaseId)
	}
	if vulId > 0 {
		session.Where("vul_id=?", vulId)
	}
	return session.Delete(this)
}

func (this *VulnerabilityScannerVulRelation) GetRelationVulIds(scannerVulId string) []int {
	result := []int{}
	if err := sys_service.NewSession().Session.Table(this).Where("scanner_vul_id=?", scannerVulId).Cols(`vul_id`).Find(&result); err == nil {
		return result
	} else {
		return []int{}
	}
}
